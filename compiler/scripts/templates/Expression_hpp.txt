#ifndef EXPRESSION_HPP
#define EXPRESSION_HPP

#include <vector>
#include <string>
#include <memory>
#include <optional>
#include <unordered_map>
#include "Enum.hpp"
#include "Position.hpp"
#include "Type.hpp"

using std::vector;
using std::string;
using std::unordered_map;
using std::shared_ptr;
using std::optional;
using std::static_pointer_cast;
using std::make_shared;

class Statement;
class Expression;
class BlockStatement;
class CatchBlock;
using ExpPtr = shared_ptr<Expression>;
using StatementPtr = shared_ptr<Statement>;
using BlockPtr = shared_ptr<BlockStatement>;
using CatchBlockPtr = shared_ptr<CatchBlock>;

class Statement {
public:
  virtual Position Pos() const = 0;
  virtual StatementType GetStatementType() const = 0;
  ${statement_static_methods}
};

class Expression : public Statement {
public:
  virtual ExpressionType NodeType() const = 0;
  StatementType GetStatementType() const override {
    return StatementType::EXPRESSION;
  }
  ${expression_static_methods}
};

class CatchBlock
{
public:
  string variable;
  TypePtr test;
  BlockPtr body;

  CatchBlock(string variable, TypePtr test, BlockPtr body) : variable{variable}, test{test}, body{body} {}
};

${expression_definitions}

${statement_definitions}

#endif // EXPRESSION_HPP