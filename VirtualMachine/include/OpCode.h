#ifndef OP_CODE_H
#define OP_CODE_H
#include <stdio.h>

enum OpCode
{
	PUSH_I32_1BYTE = 0,
	PUSH_I32_2BYTE = 1,
	PUSH_I64_0 = 2,
	PUSH_I64_1 = 3,
	PUSH_F64_0 = 4,
	PUSH_F64_1 = 5,
	PUSH_I32 = 6,
	PUSH_I64 = 7,
	PUSH_F32 = 8,
	PUSH_F64 = 9,
	PUSH_STRING = 10,
	PUSH_NULL = 11,
	PUSH_LOCAL_I32 = 12,
	PUSH_LOCAL_I64 = 13,
	PUSH_LOCAL_F32 = 14,
	PUSH_LOCAL_F64 = 15,
	PUSH_LOCAL_OBJECT = 16,
	POP_LOCAL_I32 = 17,
	POP_LOCAL_I64 = 18,
	POP_LOCAL_F32 = 19,
	POP_LOCAL_F64 = 20,
	POP_LOCAL_OBJECT = 21,
	PUSH_ARRAY_I32 = 22,
	PUSH_ARRAY_I64 = 23,
	PUSH_ARRAY_F32 = 24,
	PUSH_ARRAY_F64 = 25,
	PUSH_ARRAY_OBJECT = 26,
	POP_ARRAY_I32 = 27,
	POP_ARRAY_I64 = 28,
	POP_ARRAY_F32 = 29,
	POP_ARRAY_F64 = 30,
	POP_ARRAY_OBJECT = 31,
	PUSH_FIELD_I32 = 32,
	PUSH_FIELD_I64 = 33,
	PUSH_FIELD_F32 = 34,
	PUSH_FIELD_F64 = 35,
	PUSH_FIELD_OBJECT = 36,
	POP_FIELD_I32 = 37,
	POP_FIELD_I64 = 38,
	POP_FIELD_F32 = 39,
	POP_FIELD_F64 = 40,
	POP_FIELD_OBJECT = 41,
	ADD_I32 = 42,
	ADD_I64 = 43,
	ADD_F32 = 44,
	ADD_F64 = 45,
	SUB_I32 = 46,
	SUB_I64 = 47,
	SUB_F32 = 48,
	SUB_F64 = 49,
	MUL_I32 = 50,
	MUL_I64 = 51,
	MUL_F32 = 52,
	MUL_F64 = 53,
	DIV_I32 = 54,
	DIV_I64 = 55,
	DIV_F32 = 56,
	DIV_F64 = 57,
	MOD_I32 = 58,
	MOD_I64 = 59,
	MOD_F32 = 60,
	MOD_F64 = 61,
	BIT_AND_I32 = 62,
	BIT_AND_I64 = 63,
	BIT_OR_I32 = 64,
	BIT_OR_I64 = 65,
	BIT_XOR_I32 = 66,
	BIT_XOR_I64 = 67,
	MINUS_I32 = 68,
	MINUS_I64 = 69,
	MINUS_F32 = 70,
	MINUS_F64 = 71,
	BIT_NOT_I32 = 72,
	BIT_NOT_I64 = 73,
	CAST_I32_TO_I64 = 74,
	CAST_I32_TO_F32 = 75,
	CAST_I32_TO_F64 = 76,
	CAST_I64_TO_I32 = 77,
	CAST_I64_TO_F32 = 78,
	CAST_I64_TO_F64 = 79,
	CAST_F32_TO_I32 = 80,
	CAST_F32_TO_I64 = 81,
	CAST_F32_TO_F64 = 82,
	CAST_F64_TO_I32 = 83,
	CAST_F64_TO_I64 = 84,
	CAST_F64_TO_F32 = 85,
	UP_CAST = 86,
	DOWN_CAST = 87,
	EQ_I32 = 88,
	EQ_I64 = 89,
	EQ_F32 = 90,
	EQ_F64 = 91,
	NE_I32 = 92,
	NE_I64 = 93,
	NE_F32 = 94,
	NE_F64 = 95,
	GT_I32 = 96,
	GT_I64 = 97,
	GT_F32 = 98,
	GT_F64 = 99,
	LT_I32 = 100,
	LT_I64 = 101,
	LT_F32 = 102,
	LT_F64 = 103,
	GE_I32 = 104,
	GE_I64 = 105,
	GE_F32 = 106,
	GE_F64 = 107,
	LE_I32 = 108,
	LE_I64 = 109,
	LE_F32 = 110,
	LE_F64 = 111,
	POP = 112,
	DUPLICATE = 113,
	DUPLICATE_OFFSET = 114,
	JUMP = 115,
	JUMP_IF_TRUE = 116,
	JUMP_IF_FALSE = 117,
	PUSH_FUNCTION = 118,
	PUSH_METHOD = 119,
	INVOKE = 120,
	RETURN_I32 = 121,
	RETURN_I64 = 122,
	RETURN_F32 = 123,
	RETURN_F64 = 124,
	RETURN_OBJECT = 125,
	NEW = 126,
	NEW_ARRAY = 127,
	NEW_ARRAY_LITERAL_I32 = 128,
	NEW_ARRAY_LITERAL_I64 = 129,
	NEW_ARRAY_LITERAL_F32 = 130,
	NEW_ARRAY_LITERAL_F64 = 131,
	NEW_ARRAY_LITERAL_OBJECT = 132,
	SUPER = 133,
	INSTANCE_OF = 134,
	THROW = 135,
	RETHROW = 136,
	GO_FINALLY = 137,
	FINALLY_END = 138
};
static const char* opcode_info[][2]{
	{ "PUSH_I32_1BYTE", "b" },
	{ "PUSH_I32_2BYTE", "u" },
	{ "PUSH_I64_0", "" },
	{ "PUSH_I64_1", "" },
	{ "PUSH_F64_0", "" },
	{ "PUSH_F64_1", "" },
	{ "PUSH_I32", "p" },
	{ "PUSH_I64", "p" },
	{ "PUSH_F32", "p" },
	{ "PUSH_F64", "p" },
	{ "PUSH_STRING", "p" },
	{ "PUSH_NULL", "" },
	{ "PUSH_LOCAL_I32", "u" },
	{ "PUSH_LOCAL_I64", "u" },
	{ "PUSH_LOCAL_F32", "u" },
	{ "PUSH_LOCAL_F64", "u" },
	{ "PUSH_LOCAL_OBJECT", "u" },
	{ "POP_LOCAL_I32", "u" },
	{ "POP_LOCAL_I64", "u" },
	{ "POP_LOCAL_F32", "u" },
	{ "POP_LOCAL_F64", "u" },
	{ "POP_LOCAL_OBJECT", "u" },
	{ "PUSH_ARRAY_I32", "" },
	{ "PUSH_ARRAY_I64", "" },
	{ "PUSH_ARRAY_F32", "" },
	{ "PUSH_ARRAY_F64", "" },
	{ "PUSH_ARRAY_OBJECT", "" },
	{ "POP_ARRAY_I32", "" },
	{ "POP_ARRAY_I64", "" },
	{ "POP_ARRAY_F32", "" },
	{ "POP_ARRAY_F64", "" },
	{ "POP_ARRAY_OBJECT", "" },
	{ "PUSH_FIELD_I32", "u" },
	{ "PUSH_FIELD_I64", "u" },
	{ "PUSH_FIELD_F32", "u" },
	{ "PUSH_FIELD_F64", "u" },
	{ "PUSH_FIELD_OBJECT", "u" },
	{ "POP_FIELD_I32", "u" },
	{ "POP_FIELD_I64", "u" },
	{ "POP_FIELD_F32", "u" },
	{ "POP_FIELD_F64", "u" },
	{ "POP_FIELD_OBJECT", "u" },
	{ "ADD_I32", "" },
	{ "ADD_I64", "" },
	{ "ADD_F32", "" },
	{ "ADD_F64", "" },
	{ "SUB_I32", "" },
	{ "SUB_I64", "" },
	{ "SUB_F32", "" },
	{ "SUB_F64", "" },
	{ "MUL_I32", "" },
	{ "MUL_I64", "" },
	{ "MUL_F32", "" },
	{ "MUL_F64", "" },
	{ "DIV_I32", "" },
	{ "DIV_I64", "" },
	{ "DIV_F32", "" },
	{ "DIV_F64", "" },
	{ "MOD_I32", "" },
	{ "MOD_I64", "" },
	{ "MOD_F32", "" },
	{ "MOD_F64", "" },
	{ "BIT_AND_I32", "" },
	{ "BIT_AND_I64", "" },
	{ "BIT_OR_I32", "" },
	{ "BIT_OR_I64", "" },
	{ "BIT_XOR_I32", "" },
	{ "BIT_XOR_I64", "" },
	{ "MINUS_I32", "" },
	{ "MINUS_I64", "" },
	{ "MINUS_F32", "" },
	{ "MINUS_F64", "" },
	{ "BIT_NOT_I32", "" },
	{ "BIT_NOT_I64", "" },
	{ "CAST_I32_TO_I64", "" },
	{ "CAST_I32_TO_F32", "" },
	{ "CAST_I32_TO_F64", "" },
	{ "CAST_I64_TO_I32", "" },
	{ "CAST_I64_TO_F32", "" },
	{ "CAST_I64_TO_F64", "" },
	{ "CAST_F32_TO_I32", "" },
	{ "CAST_F32_TO_I64", "" },
	{ "CAST_F32_TO_F64", "" },
	{ "CAST_F64_TO_I32", "" },
	{ "CAST_F64_TO_I64", "" },
	{ "CAST_F64_TO_F32", "" },
	{ "UP_CAST", "u" },
	{ "DOWN_CAST", "u" },
	{ "EQ_I32", "" },
	{ "EQ_I64", "" },
	{ "EQ_F32", "" },
	{ "EQ_F64", "" },
	{ "NE_I32", "" },
	{ "NE_I64", "" },
	{ "NE_F32", "" },
	{ "NE_F64", "" },
	{ "GT_I32", "" },
	{ "GT_I64", "" },
	{ "GT_F32", "" },
	{ "GT_F64", "" },
	{ "LT_I32", "" },
	{ "LT_I64", "" },
	{ "LT_F32", "" },
	{ "LT_F64", "" },
	{ "GE_I32", "" },
	{ "GE_I64", "" },
	{ "GE_F32", "" },
	{ "GE_F64", "" },
	{ "LE_I32", "" },
	{ "LE_I64", "" },
	{ "LE_F32", "" },
	{ "LE_F64", "" },
	{ "POP", "" },
	{ "DUPLICATE", "" },
	{ "DUPLICATE_OFFSET", "u" },
	{ "JUMP", "u" },
	{ "JUMP_IF_TRUE", "u" },
	{ "JUMP_IF_FALSE", "u" },
	{ "PUSH_FUNCTION", "uu" },
	{ "PUSH_METHOD", "uu" },
	{ "INVOKE", "" },
	{ "RETURN_I32", "" },
	{ "RETURN_I64", "" },
	{ "RETURN_F32", "" },
	{ "RETURN_F64", "" },
	{ "RETURN_OBJECT", "" },
	{ "NEW", "u" },
	{ "NEW_ARRAY", "bu" },
	{ "NEW_ARRAY_LITERAL_I32", "u" },
	{ "NEW_ARRAY_LITERAL_I64", "u" },
	{ "NEW_ARRAY_LITERAL_F32", "u" },
	{ "NEW_ARRAY_LITERAL_F64", "u" },
	{ "NEW_ARRAY_LITERAL_OBJECT", "u" },
	{ "SUPER", "" },
	{ "INSTANCE_OF", "u" },
	{ "THROW", "" },
	{ "RETHROW", "" },
	{ "GO_FINALLY", "u" },
	{ "FINALLY_END", "" }
};

typedef enum
{
	TYPE_I32,
	TYPE_I64,
	TYPE_F32,
	TYPE_F64,
	TYPE_STRING,
	TYPE_OBJECT
} TypeTag;


static const char* TypeTagToString(TypeTag tag)
{
	switch (tag)
	{
	case TYPE_I32:
		return "TYPE_I32";
	case TYPE_I64:
		return "TYPE_I64";
	case TYPE_F32:
		return "TYPE_F32";
	case TYPE_F64:
		return "TYPE_F64";
	case TYPE_STRING:
		return "TYPE_STRING";
	case TYPE_OBJECT:
		return "TYPE_OBJECT";
	default:
		fprintf(stderr, __FUNCTION__);
		fprintf(stderr, "type tag enumeration\n");
	}
}
#endif // OP_CODE_H