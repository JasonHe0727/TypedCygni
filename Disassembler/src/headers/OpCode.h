#ifndef OP_CODE_H
#define OP_CODE_H

#define OP_NUMERIC(TYPE)                                                    \
  ADD_##TYPE, SUB_##TYPE, MUL_##TYPE, DIV_##TYPE, MOD_##TYPE, MINUS_##TYPE, \
      GT_##TYPE, LT_##TYPE, GE_##TYPE, LE_##TYPE, EQ_##TYPE, NE_##TYPE

#define OP_ACTION(TYPE)                                                  \
  PUSH_LOCAL_##TYPE, POP_LOCAL_##TYPE, RETURN_##TYPE, PUSH_FIELD_##TYPE, \
      POP_FIELD_##TYPE, PUSH_STATIC_##TYPE, POP_STATIC_##TYPE,           \
      NEW_ARRAY_##TYPE, PUSH_ARRAY_ELEMENT_##TYPE, POP_ARRAY_ELEMENT_##TYPE

#define OP_CONVERT(TYPE1, TYPE2) \
  CONVERT_##TYPE1##_TO_##TYPE2, CONVERT_##TYPE2##_TO_##TYPE1

#define OP_INTEGER(TYPE) BIT_AND_##TYPE, BIT_OR_##TYPE, BIT_XOR_##TYPE

enum Op {
  PUSH_INT_MINUS_ONE,
  PUSH_INT_1BYTE,
  PUSH_INT_2BYTE,
  PUSH_NULL,
  PUSH_CONSTANT_I32,
  PUSH_CONSTANT_I64,
  PUSH_CONSTANT_F32,
  PUSH_CONSTANT_F64,
  PUSH_CONSTANT_STRING,
  PUSH_CONSTANT_WIDE_I32,
  PUSH_CONSTANT_WIDE_I64,
  PUSH_CONSTANT_WIDE_F32,
  PUSH_CONSTANT_WIDE_F64,
  PUSH_CONSTANT_WIDE_STRING,

  OP_NUMERIC(I32),
  OP_NUMERIC(I64),
  OP_NUMERIC(F32),
  OP_NUMERIC(F64),

  OP_ACTION(I32),
  OP_ACTION(I64),
  OP_ACTION(F32),
  OP_ACTION(F64),
  OP_ACTION(OBJECT),

  OP_CONVERT(I32, I64),
  OP_CONVERT(I32, F32),
  OP_CONVERT(I32, F64),
  OP_CONVERT(I64, F32),
  OP_CONVERT(I64, F64),
  OP_CONVERT(F32, F64),

  OP_INTEGER(I32),
  OP_INTEGER(I64),

  POP,
  DUPLICATE,

  CALL,
  NATIVE_CALL,
  TAIL_CALL,

  UP_CAST,
  DOWN_CAST,

  PUSH_METHOD,
  PUSH_STATIC_METHOD,
  PUSH_FUNCTION,

  NEW,

  SUPER,
  INSTANCE_OF,

  THROW,
  RETHROW,

  JUMP,
  JUMP_IF_TRUE,
  JUMP_IF_FALSE
};
#endif /* OP_CODE_H */